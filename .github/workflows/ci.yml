name: Continuous Integration
on:
  workflow_call:
    inputs:
      tags:
        type: string
        required: true
jobs:
  haskell-build:
    name: Haskell Build
    runs-on: crossmap-dev-runners-k8s
    container:
      image: images.home.mtaylor.io/crossmap-dev-api-build:sha-4f2c0f3
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup

    - name: Configure the build
      shell: sh
      run: |
        cabal configure --enable-tests --enable-benchmarks --disable-documentation
        cabal build all --dry-run
      # The last step generates dist-newstyle/cache/plan.json for the cache key.

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      shell: sh
      run: cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      shell: sh
      run: cabal install --installdir=target --install-method=copy --overwrite-policy=always

    - name: Run tests
      shell: sh
      run: cabal test all

    - name: Upload target
      uses: actions/upload-artifact@v4
      with:
        name: target
        path: target
  docker-image:
    name: Docker Image
    needs: haskell-build
    runs-on: crossmap-dev-runners-dind
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download target
      uses: actions/download-artifact@v4
      with:
        name: target
        path: target

    - name: Fix permissions
      shell: bash
      run: |
        sudo chmod 0755 target/*

    - id: meta
      name: Docker Metadata
      uses: docker/metadata-action@v5
      with:
        images: images.home.mtaylor.io/crossmap-api
        tags: ${{ inputs.tags }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
