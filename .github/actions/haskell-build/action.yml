name: Haskell Build
description: Build the Haskell project
runs:
  using: composite
  steps:
  - uses: haskell-actions/setup@v2
    id: setup

  - name: Configure the build
    shell: sh
    run: |
      cabal configure --enable-tests --enable-benchmarks --disable-documentation
      cabal build all --dry-run
    # The last step generates dist-newstyle/cache/plan.json for the cache key.

  - name: Restore cached dependencies
    uses: actions/cache/restore@v4
    id: cache
    env:
      key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
    with:
      path: ${{ steps.setup.outputs.cabal-store }}
      key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
      restore-keys: ${{ env.key }}-

  - name: Install dependencies
    # If we had an exact cache hit, the dependencies will be up to date.
    if: steps.cache.outputs.cache-hit != 'true'
    shell: sh
    run: cabal build all --only-dependencies

  # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
  - name: Save cached dependencies
    uses: actions/cache/save@v4
    # If we had an exact cache hit, trying to save the cache would error because of key clash.
    if: steps.cache.outputs.cache-hit != 'true'
    with:
      path: ${{ steps.setup.outputs.cabal-store }}
      key: ${{ steps.cache.outputs.cache-primary-key }}

  - name: Build
    shell: sh
    run: cabal install --installdir=bin --install-method=copy --overwrite-policy=always

  - name: Run tests
    shell: sh
    run: cabal test all

  - name: Upload client
    uses: actions/upload-artifact@v4
    with:
      name: crossmap-dev
      path: bin/crossmap-dev

  - name: Upload server
    uses: actions/upload-artifact@v4
    with:
      name: crossmap-dev-server
      path: bin/crossmap-dev-server
